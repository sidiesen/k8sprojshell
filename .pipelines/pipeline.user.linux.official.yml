# For full annotated example, please visit
#  https://onebranch.visualstudio.com/Pipeline/_wiki/wikis/Pipeline.wiki?wikiVersion=GBwikiMaster&pagePath=%2FWelcome%20to%20OneBranch%20Pipeline%2FCross%20Platform%20Cloud%20Delivery%20Pipeline%20(CDPx)%2FYAML%20Format%2FAnnotated%20Example

# The following section is a metadata section that describes what kind of environment this pipeline should be executing in. Some of the
# information is redundant and will be removed in a future version.
environment:
  host:
    os: 'linux'                                                         # used to verify at runtime that correct host pool is being used
    flavor: 'ubuntu'                                                    # not used and will be removed in future
    version: '16.04'                                                    # not used and will be removed in future
  runtime:
    provider: 'appcontainer'                                            # Currently only appcontainer is supported future will bring
                                                                        # oscontainer and virtualmachine
    image: 'mcr.microsoft.com/dotnet/core/sdk:3.0'                      # This is the image that your pipeline will run in.
                                                                        # For (appcontainer), Docker Hub public Microsoft repository images
                                                                        # can be used.
                                                                        # Example microsoft/dotnet:1.1.1-sdk-nanoserver. Or the CDP team
                                                                        # vended and custom images can be used.
                                                                        # These are cdpxwin.azurecr.io/user/<user-image-name> or
                                                                        # cdpxwin.azurecr.io/legacy/samples/wsmobile (for now).
    source_mode: 'link'                                                 # 'copy' or 'link'. There is a known bug for npm and ruby on some of
                                                                        # our images that linked folder in container may cause errors on these
                                                                        # languages, for that case, use 'copy' here and pipeline will full
                                                                        # copy source into container from host before each step and full copy
                                                                        # out back to host after each step. It may be very slow if you have a
                                                                        # giant repository.
signing_options:
  profile: 'internal_azure_service'   
                                                                        
workspace_options:                  # Metadata section
  enable_legacy_networking: true   # Default is false. If false, only the Restore stage enables network connectivity to the user build container. 
                                    # If true, all stages enable network connectivity to user build container.


# The following is a metadata section that describes the versioning scheme and basic version datacenter to use. This data will be used to
# generate content in the .version folder for use by your custom versioning steps.
# In fact, in this sample, a file named .version\PipelineAssemblyInfo.cs will be generated that contains the following code (ignore the actual
# versions because those are dummy values).
#
# // This is a CDPX pipeline generated file
# using System.Reflection;
# [assembly: AssemblyVersion("1.0.060517.1000")]
# [assembly: AssemblyFileVersion("1.0.060517.1000")]
# [assembly: AssemblyInformationalVersion("1.0.060517.1000-test-31f791f1")]
#
# The key point is that this file is not checked in by CDPX. So, we check in a dummy file with similar content and add this file as a compile
# item with a link. When the code is built in CDPX, the file is first overwritten with actual version numbers. Thus, when the code compiles,
# the new version numbers are picked up.
#
# Obviously, this may not work for everyone. So, in addition to these template files, CDPX writes out several info files whose content is some
# part of the version number. Which part is hinted at by the name of the file.
# For example, package.semantic.info will contain patch semantic version number in the form 1.0.MMddyyrrrr-tag-commit.
version:
  name: 'compute-hybridMgmt-CCRP'                                                  # The uber name to attach to the artifacts generated by this pipeline.
                                                                        # Currently unused, but will be used in the future to refer to the 
                                                                        # artifacts as a group by name.
  major: 1                                                              # The major version number.
  minor: 0                                                              # The minor version number
  # tag: 'alpha'                                                          # Tag to use for semantic versioning.
  system: 'revisioncounter'
  exclude_commit: true                                                       # Versioning scheme to use.
                                                                        # patch         - 1.0.MMddyyrrrr will be generated
                                                                        # buildrevision - 1.0.MMddyy.rrrr will be generated.

# The following is an optional user defined stage. If the version numbers generated by the pipeline are not compatible with your pre-existing
# model, then you can customize your version number any way you want by executing any scripts in this stage. This is a logical organization;
# you can do this even in build stage but we will be adding support to make VSTS show the custom version number in the future.
# Eventually, network access will be limited or cut-off in this stage.
versioning:
  commands:                                                             # This is a sequence of script files to be executed one after another
                                                                        # in the order they appear here.
                                                                        # We are not doing anything here. In fact, we could have omitted the
                                                                        # versioning stage entirely.

# Follow step - Package Sources - to inject credentials into NuGet.config
# https://onebranch.visualstudio.com/Pipeline/_wiki/wikis/Pipeline.wiki?pagePath=%2FCDPx%20%252D%20Cross%252DPlatform%20Cloud%20Delivery%20Pipeline%2FUsage%2FPackage%20Sources&wikiVersion=GBwikiMaster
package_sources:
  nuget:
    config_files:                               # A list of glob patterns specifying the configuration files. Use this if you already have NuGet.Config files in your repository.
      - include:                                # Configuration files to include for automatic inference.
        - "NuGet.Config"

# The following is an optional user defined stage. This is the only stage that will have network connectivity 
# starting July 1, 2018. This stage should be utilized for restoring package dependencies.
restore:
  commands: 
   - !!defaultcommand
      name: 'Restore sln'
      command: 'build/restore.sh'
      arguments: '*'

# An optional user defined stage for performing any compilation, code generation etc.
# All files in the artifacts sections will be collected, saved off and signed.
# The signed files will be restored back to the original locations before the next stage is invoked.
# Eventually, network access will be limited or cut-off in this stage.
build:
  commands:                                                             # This is a sequence of script files to be executed one after another
                                                                        # in the order they appear here.
    - !!buildcommand                                                    # There are three types of commands, buildcommand, testcommand and
                                                                        # defaultcommand.
                                                                        # The only difference is that they collect different types of
                                                                        # artifacts.
                                                                        # buildcommand --- run a build script, collect artifacts, specify
                                                                        #                  files to sign and logs.
                                                                        # defaultcommand - run any script, collect logs only.
                                                                        # testcommand ---- run a test script, collect logs, test results and
                                                                        #                  code coverage files. and associate with the build.
      name: 'Build sln'                                                   # This is name for this step. The step name will be in logs and in the
                                                                        # future, will be associated with metrics, timelines, journal etc.
      command: 'build.sh'                                               # A root relative path to the script to execute. Any console output
                                                                        # will be automatically pushed to VSTS logs. Any files explicitly
                                                                        # written to file can be collected via the logs list.
                                                                        # Note that the best way to code these scripts is such that they run
                                                                        # on a developer desktop. Invariably, if you can get it working on
                                                                        # your dev desktop, it should work in the CDP pipeline.
      arguments: 'ClusterConfigRP Release False'
      logs:                                                             # This is a sequence of include and exclude glob patterns.
        - include:                                                      # Include patterns are evaluated fully first. All of them are relative
                                                                        # to the root of the source directory.
            - 'msbuild.log'
          exclude:                                                      # Exclude patterns are evaluated after all include patterns are
                                                                        # evaluated.
                                                                        # There may be spurious log files. Exclude them.
      artifacts:                                                        # A sequence of entries that describes what artifacts to collect and
                                                                        # upload.
        - from: 'out'
          include: 
            - '**/*'
                                                                        # We always preserve the root relative path for every matched file.
                                                                        # Sometimes that's OK and sometimes it's not. The from, to options
                                                                        # (both are optional and either of them can be used independently)
                                                                        # allow you to remap the folder from which articacts are picked up to
                                                                        # a different location. Think of this as a effectively doing a
                                                                        # robocopy /S C:\X\Y to D;\F.
# An optional user defined stage for performing packaging. This exists as a separate stage because some build processes do a
# compile-sign-package-sign model. For example, Windows based builds use this model. Linux builds typically follow a
# compile-hash-package-hash-sign hash model. For those folks, package may not need to exist as a separate step.
# Eventually, network access will be limited or cut-off in this stage.
package:
  commands:                                                             # This is a sequence of script files to be executed one after another
                                                                        # in the order they appear here.
                                                                        # We are not doing anything here. In fact, we could have omitted the
                                                                        # package stage entirely.
    - !!dockerbuildcommand
      name: 'Build docker image ClusterConfigRP'
      context_folder: 'out/Release/ClusterConfigRP/'
      dockerfile_name: 'ccrp.webservice.Dockerfile'
      repository_name: 'clusterconfig/clusterconfigrp'
      latest: true                               
      publish: true                              
      publish_build_tag: true
      metadata_file: 
        artifact_path: 'images/clusterconfigrp.json'

# An optional user defined stage for running tests that need network access. Note that unit tests and others that do not need network access
# can be run in build or package stages itself. Any artifacts built in this stage will be separated out and will not be signed.
# However, we recommend that tests always be run in the test stage.
# Eventually, we may even skip test artifacts completely.
test:
  commands:                                                             # This is a sequence of script files to be executed one after another
                                                                        # in the order they appear here.
#   - !!testcommand                                                     # We are going to run tests and collect back the test results for
#                                                                       # publishing
#     name: 'Test The Code'                                             # If your test run does not have a name, this will be used.
#     command: 'src\test.cmd'                                           # Script that runs tests.
#     testresults:                                                      # Sequence of entries indicating which test results files to collect.
#       - title: 'All Tests'                                            # Test run title. Used by VSTS.
#         configuration: 'Debug'                                        # Optional build configuration.
#         platform: 'x64'                                               # Optional build platform.
#         type: 'vstest'                                                # Test engine type. Used by VSTS. Supported values are JUnit, NUnit,
#                                                                       # VSTest and xUnit.
#         include:                                                      # Sequence of glob patterns indicating which test results file to
#                                                                       # associate with this test run.
#           - 'src\**\TestResults\**\*.trx'                             # Include all TRX files under any TestResults folder under the src
#                                                                       # folder.

# An optional, interim user defined stage for performing publishing of the build. Examples include, dropping the files to a network share,
# pushing packages to a package repository, uploading binaries to blob store etc. 
# Eventually, network access in this stage will be restricted to dev-feeds only for non-official builds. We may remove this stage for official
# builds. Teams should use VSRM or Ev2 to release.
publish:
  commands:                                                             # This is a sequence of script files to be executed one after another
                                                                        # in the order they appear here.
                                                                        # We are not doing anything here. In fact, we could have omitted the
                                                                        # publish stage entirely.

# An optional user defined stage for running any type of always-needed uber cleanup. This exists as a separate stage because some build
# processes acquire shared resources during some stages. In case the build is cancelled or aborted or fails, this stage is provided so that
# these resources can be unacquired. In particular, the commands in this stage are always run.
user_cleanup:
  commands:                                                             # This is a sequence of script files to be executed one after another
                                                                        # in the order they appear here.
                                                                        # We are not doing anything here. In fact, we could have omitted the
                                                                        # user_cleanup stage entirely.
